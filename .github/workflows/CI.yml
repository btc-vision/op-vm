name: CI
env:
  DEBUG: neon:*
  APP_NAME: op-vm
  PACKAGE_NAME: "@btc-vision/op-vm"
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

permissions:
  contents: write
  id-token: write

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x64
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
            platform: win32
            arch: x64

          # Windows ARM64
          - os: windows-latest
            rust-target: aarch64-pc-windows-msvc
            platform: win32
            arch: arm64

          # macOS x64 (Intel)
          - os: macos-latest
            rust-target: x86_64-apple-darwin
            platform: darwin
            arch: x64

          # macOS ARM64 (Apple Silicon)
          - os: macos-latest
            rust-target: aarch64-apple-darwin
            platform: darwin
            arch: arm64

          # Linux x64
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
            platform: linux
            arch: x64

        node-version: [ 22, 23 ]

    name: Build - ${{ matrix.platform }}-${{ matrix.arch }} - Node ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.rust-target }}

      - name: Install @neon-rs/cli
        run: npm install -g @neon-rs/cli

      - name: Install dependencies
        run: npm ci

      - name: Build native module
        run: npm run build
        env:
          RUST_TARGET: ${{ matrix.rust-target }}

      - name: Rename binary
        shell: bash
        run: |
          if [ -f "index.node" ]; then
            mkdir -p prebuilds/${{ matrix.platform }}-${{ matrix.arch }}
            cp index.node prebuilds/${{ matrix.platform }}-${{ matrix.arch }}/op-vm.node
          fi

      - name: Test binary
        # Skip test for cross-compiled ARM targets
        if: matrix.arch != 'arm64' || matrix.os == 'macos-latest'
        run: npm test

      - name: Package prebuilt binary
        shell: bash
        run: |
          tar -czf ${{ env.APP_NAME }}-v${{ matrix.node-version }}-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz -C prebuilds/${{ matrix.platform }}-${{ matrix.arch }} .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.platform }}-${{ matrix.arch }}-node${{ matrix.node-version }}
          path: ${{ env.APP_NAME }}-v${{ matrix.node-version }}-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz
          if-no-files-found: error

  # Linux ARM64 builds using Docker
  build-linux-arm:
    strategy:
      matrix:
        node-version: [ 22, 23 ]

    name: Build - linux-arm64 (Docker) - Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build in Docker
        run: |
          docker run --rm -v ${{ github.workspace }}:/build \
            --platform linux/arm64 \
            -w /build \
            node:${{ matrix.node-version }} \
            bash -c "
              apt-get update && apt-get install -y build-essential python3 curl && \
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
              source ~/.cargo/env && \
              npm install -g @neon-rs/cli && \
              npm ci && \
              npm run build && \
              mkdir -p prebuilds/linux-arm64 && \
              cp index.node prebuilds/linux-arm64/op-vm.node
            "

      - name: Package prebuilt binary
        run: |
          tar -czf ${{ env.APP_NAME }}-v${{ matrix.node-version }}-linux-arm64.tar.gz -C prebuilds/linux-arm64 .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-linux-arm64-node${{ matrix.node-version }}
          path: ${{ env.APP_NAME }}-v${{ matrix.node-version }}-linux-arm64.tar.gz
          if-no-files-found: error

  publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [ build, build-linux-arm ]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Extract and organize prebuilds
        run: |
          mkdir -p prebuilds
          cd artifacts
          for dir in */; do
            for file in $dir*.tar.gz; do
              # Extract platform and arch from filename
              if [[ $file =~ v[0-9]+-([^-]+)-([^.]+)\.tar\.gz ]]; then
                platform="${BASH_REMATCH[1]}"
                arch="${BASH_REMATCH[2]}"
                mkdir -p ../prebuilds/$platform-$arch
                tar -xzf $file -C ../prebuilds/$platform-$arch
              fi
            done
          done
          cd ..
          ls -la prebuilds/

      - name: Create temporary package.json for publishing
        run: |
          # Remove postinstall script for published package
          node -e "
          const pkg = require('./package.json');
          delete pkg.scripts.postinstall;
          pkg.files = pkg.files || [];
          if (!pkg.files.includes('prebuilds/')) pkg.files.push('prebuilds/');
          require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Install dependencies (without postinstall)
        run: npm ci --ignore-scripts

      - name: Publish to npm
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Test published package
  test-published:
    name: Test published package
    runs-on: ${{ matrix.os }}
    needs: publish
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        node-version: [ 22, 23 ]

    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get package version
        shell: bash
        run: |
          echo "PACKAGE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Test installation
        run: |
          mkdir test-install
          cd test-install
          npm init -y
          echo '{"type":"module"}' > package.json
          npm install ${{ env.PACKAGE_NAME }}@${{ env.PACKAGE_VERSION }}
          node -e "import opvm from '${{ env.PACKAGE_NAME }}'; console.log('Package loaded successfully:', opvm);"
